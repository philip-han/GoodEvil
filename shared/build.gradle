plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}
repositories {
    mavenCentral()
    maven {
        url 'https://dl.bintray.com/kotlin/kotlinx/'
    }
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        // This preset is for iPhone emulator
        // Switch here to presets.iosArm64 to build library for iPhone device
        fromPreset(presets.iosX64, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation 'io.ktor:ktor-client-core:1.0.1'
                implementation 'io.ktor:ktor-client-json:1.0.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.0.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.9.1'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1'
                implementation 'io.ktor:ktor-client-core-jvm:1.0.1'
                implementation 'io.ktor:ktor-client-json-jvm:1.0.1'
                implementation 'io.ktor:ktor-client-okhttp:1.0.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.9.1'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        iosMain {
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.0.1'
                implementation 'io.ktor:ktor-client-ios:1.0.1'
                implementation 'io.ktor:ktor-client-core-ios:1.0.1'
                implementation 'io.ktor:ktor-client-json-ios:1.0.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.9.1'
            }
        }
        iosTest {
        }
    }
}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.ios.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}


tasks.build.dependsOn packForXCode
